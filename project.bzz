
include "include/vec2.bzz"
include "explore.bzz"
include "walk.bzz"


# Threshold to detect obstacle
delta = 0.1
left_ws = 20.0
right_ws = 20.0
pi = math.pi
stepsize = 10
counter = -1
ini = 0		#for vid



function rad2deg(angle){
	deg = angle*180/pi
	return deg
}

function deg2rad(angle){
	rad = angle*pi/180
	return rad
}


# Accumulator of neighbor LJ interactions
function lj_sum(rid, data, accum) {
  return math.vec2.add(data, accum)
}

function reading2vec(rid, reading){
    return math.vec2.newp(reading.value, reading.angle)
}



function init() {
	s1 = swarm.create(1)
	s1.join()
	
	create_vstig()
	
	math.rng.setseed(id)
	
	

}


function step() {
	# Accumulate proximity readings
	var range = math.vec2.new(0.0, 0.0)
  cart = map(proximity, reading2vec)
  range = reduce(cart, lj_sum, range)

	len = math.vec2.length(range)
	ang = math.vec2.angle(range)

	theta_prev = pose.orientation.yaw
	
	
	#If theres a obstacle as detected by proximity sensor >0, turn the direction
	if (len < delta){
		#diffusion()
		counter = c_randomwalk(theta_prev,counter)		
		#counter = c_randomwalk1(theta_prev,counter)
	} 
	else if (ang > 0.0){
		set_wheels(left_ws, 0.0)   }
		else {
			set_wheels(0.0, right_ws) }



	#Determine the arena explored
	posx = pose.position.x
	posy = pose.position.y


	vid = find_vid(posx,posy)
	if(ini==0){
	vid_prev = vid
	update(vid)
	ini = 1
	}
	
	oldid = string.toint(vid_prev)
	newid = string.toint(vid)
	if((oldid - newid) != 0){
		#log("Changing!")
		#log("Old: ", oldid, "New: ", newid)
		update(vid)
		vid_prev = vid}


}


function reset() {
	percent_explored()
	#f = io.fopen("testFile.txt", "a")
	#io.fwrite(f, "This is a test")
	#io.fclose(f)
}


function destroy() {
	#log("Testing")
	#f = io.fopen("testFile.txt", "a")
	#f.fwrite("This is a test")
	#f.fclose()
}
